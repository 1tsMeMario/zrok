// Code generated by go-swagger; DO NOT EDIT.

package metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/openziti-test-kitchen/zrok/rest_model_zrok"
)

// ListIdentitiesHandlerFunc turns a function with the right signature into a list identities handler
type ListIdentitiesHandlerFunc func(ListIdentitiesParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ListIdentitiesHandlerFunc) Handle(params ListIdentitiesParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// ListIdentitiesHandler interface for that can handle valid list identities params
type ListIdentitiesHandler interface {
	Handle(ListIdentitiesParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewListIdentities creates a new http.Handler for the list identities operation
func NewListIdentities(ctx *middleware.Context, handler ListIdentitiesHandler) *ListIdentities {
	return &ListIdentities{Context: ctx, Handler: handler}
}

/* ListIdentities swagger:route GET /listIdentities metadata listIdentities

ListIdentities list identities API

*/
type ListIdentities struct {
	Context *middleware.Context
	Handler ListIdentitiesHandler
}

func (o *ListIdentities) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewListIdentitiesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
