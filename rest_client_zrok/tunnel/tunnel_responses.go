// Code generated by go-swagger; DO NOT EDIT.

package tunnel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti-test-kitchen/zrok/rest_model_zrok"
)

// TunnelReader is a Reader for the Tunnel structure.
type TunnelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TunnelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewTunnelCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewTunnelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTunnelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTunnelCreated creates a TunnelCreated with default headers values
func NewTunnelCreated() *TunnelCreated {
	return &TunnelCreated{}
}

/*
TunnelCreated describes a response with status code 201, with default header values.

tunnel created
*/
type TunnelCreated struct {
	Payload *rest_model_zrok.TunnelResponse
}

// IsSuccess returns true when this tunnel created response has a 2xx status code
func (o *TunnelCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this tunnel created response has a 3xx status code
func (o *TunnelCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tunnel created response has a 4xx status code
func (o *TunnelCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this tunnel created response has a 5xx status code
func (o *TunnelCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this tunnel created response a status code equal to that given
func (o *TunnelCreated) IsCode(code int) bool {
	return code == 201
}

func (o *TunnelCreated) Error() string {
	return fmt.Sprintf("[POST /tunnel][%d] tunnelCreated  %+v", 201, o.Payload)
}

func (o *TunnelCreated) String() string {
	return fmt.Sprintf("[POST /tunnel][%d] tunnelCreated  %+v", 201, o.Payload)
}

func (o *TunnelCreated) GetPayload() *rest_model_zrok.TunnelResponse {
	return o.Payload
}

func (o *TunnelCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model_zrok.TunnelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTunnelUnauthorized creates a TunnelUnauthorized with default headers values
func NewTunnelUnauthorized() *TunnelUnauthorized {
	return &TunnelUnauthorized{}
}

/*
TunnelUnauthorized describes a response with status code 401, with default header values.

invalid environment identity
*/
type TunnelUnauthorized struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this tunnel unauthorized response has a 2xx status code
func (o *TunnelUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tunnel unauthorized response has a 3xx status code
func (o *TunnelUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tunnel unauthorized response has a 4xx status code
func (o *TunnelUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this tunnel unauthorized response has a 5xx status code
func (o *TunnelUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this tunnel unauthorized response a status code equal to that given
func (o *TunnelUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *TunnelUnauthorized) Error() string {
	return fmt.Sprintf("[POST /tunnel][%d] tunnelUnauthorized  %+v", 401, o.Payload)
}

func (o *TunnelUnauthorized) String() string {
	return fmt.Sprintf("[POST /tunnel][%d] tunnelUnauthorized  %+v", 401, o.Payload)
}

func (o *TunnelUnauthorized) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *TunnelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTunnelInternalServerError creates a TunnelInternalServerError with default headers values
func NewTunnelInternalServerError() *TunnelInternalServerError {
	return &TunnelInternalServerError{}
}

/*
TunnelInternalServerError describes a response with status code 500, with default header values.

internal server error
*/
type TunnelInternalServerError struct {
	Payload rest_model_zrok.ErrorMessage
}

// IsSuccess returns true when this tunnel internal server error response has a 2xx status code
func (o *TunnelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this tunnel internal server error response has a 3xx status code
func (o *TunnelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this tunnel internal server error response has a 4xx status code
func (o *TunnelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this tunnel internal server error response has a 5xx status code
func (o *TunnelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this tunnel internal server error response a status code equal to that given
func (o *TunnelInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *TunnelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /tunnel][%d] tunnelInternalServerError  %+v", 500, o.Payload)
}

func (o *TunnelInternalServerError) String() string {
	return fmt.Sprintf("[POST /tunnel][%d] tunnelInternalServerError  %+v", 500, o.Payload)
}

func (o *TunnelInternalServerError) GetPayload() rest_model_zrok.ErrorMessage {
	return o.Payload
}

func (o *TunnelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
