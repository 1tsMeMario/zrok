services:
  # create Caddyfile
  zrok-caddyfile:
    image: busybox
    # create Caddyfile
    entrypoint:
      - sh
      - -euc
      - |
        ZROK_UPSTREAM_URL="${ZROK_TARGET:-http://zrok-test:9090}"
        ZROK_UPSTREAM_HOST="$(echo $${ZROK_UPSTREAM_URL}|sed -E 's#^https?://([^/:]+).*#\1#')"
        mkdir -p /mnt/.zrok
        cat <<CADDYFILE >| /mnt/.zrok/Caddyfile
        {
          # GET /config/ and POST /load on this API to reload Caddy config
          admin 0.0.0.0:2019
        }
        http:// {
          bind {{ .ZrokBindAddress }}
          handle_path /zrok-test/* {
              reverse_proxy http://zrok-test:9090 {
                  header_up Host zrok-test
              }
          }
          handle_path /zrok-static/* {
            root * /mnt/.zrok/html
            file_server browse
          }
          reverse_proxy /* $${ZROK_UPSTREAM_URL} {
              header_up Host $${ZROK_UPSTREAM_HOST}
          }
        }
        CADDYFILE
    user: root
    volumes:
      - zrok_env:/mnt

  # set file ownership
  zrok-init:
    image: busybox
    depends_on:
      zrok-caddyfile:
        condition: service_completed_successfully
    # matches uid:gid of "nobody" in zrok container image
    command: chown -Rc 65534:65534 /mnt/
    user: root
    volumes:
      - zrok_env:/mnt

  # enable zrok environment
  zrok-enable:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    depends_on:
      zrok-init:
        condition: service_completed_successfully
    entrypoint: zrok-enable.bash
    volumes:
      - zrok_env:/mnt
    environment:
      STATE_DIRECTORY: /mnt
      ZROK_ENABLE_TOKEN:
      ZROK_API_ENDPOINT:
      ZROK_ENVIRONMENT_NAME:

  # reserve zrok frontend subdomain and start sharing the target
  zrok-share:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    entrypoint: zrok-share.bash
    depends_on:
      zrok-enable:
        condition: service_completed_successfully
    volumes:
      - zrok_env:/mnt
    ports: []
      # - 127.0.0.1:2019:2019  # Caddy admin API
    environment:
      STATE_DIRECTORY: /mnt
      PFXLOG_NO_JSON: "true"
      ZROK_BACKEND_MODE:
      ZROK_TARGET:
      ZROK_OAUTH_PROVIDER:
      ZROK_OATH_EMAILS:
      ZROK_BASIC_AUTH:

  # demo server
  zrok-test:
    image: ${ZROK_CONTAINER_IMAGE:-docker.io/openziti/zrok}
    command: test endpoint --address 0.0.0.0  # 9090

volumes:
  zrok_env:
